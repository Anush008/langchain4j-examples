import dev.langchain4j.data.embedding.Embedding;
import dev.langchain4j.model.embedding.EmbeddingModel;
import dev.langchain4j.model.embedding.Similarity;
import dev.langchain4j.model.huggingface.HuggingFaceEmbeddingModel;
import dev.langchain4j.model.inprocess.InProcessEmbeddingModel;

import java.io.IOException;

import static dev.langchain4j.model.inprocess.InProcessEmbeddingModelType.ALL_MINILM_L6_V2;

public class InProcessEmbeddingModelExamples {

    public static void main(String[] args) throws IOException {

        String text = "This is a test";

        // requires "langchain4j-embeddings-all-minilm-l6-v2" dependency
        EmbeddingModel model = new InProcessEmbeddingModel(ALL_MINILM_L6_V2);
        Embedding inProcessEmbedding = model.embed(text);
        System.out.println(inProcessEmbedding);

        // Now let's compare with the embedding generated by HuggingFace
        EmbeddingModel huggingFaceModel = HuggingFaceEmbeddingModel.builder()
                .modelId("sentence-transformers/all-MiniLM-L6-v2")
                .accessToken(System.getenv("HF_API_KEY"))
                .build();
        Embedding huggingFaceEmbedding = huggingFaceModel.embed(text);
        System.out.println(huggingFaceEmbedding);

        System.out.println(Similarity.cosine(
                inProcessEmbedding.vector(),
                huggingFaceEmbedding.vector()
        ));
        // 0.9999999964191233
    }

    static class Custom_In_Process_Embedding_Model_Example {

        public static void main(String[] args) {

            // requires "langchain4j-embeddings" dependency
            EmbeddingModel model = new InProcessEmbeddingModel(
                    "./other-examples/src/main/resources/gte-small-q.onnx");
            EmbeddingModel model2 = new InProcessEmbeddingModel(
                    "./other-examples/src/main/resources/gte-small-q.onnx");

            Embedding first = model.embed("hi");
            Embedding second = model.embed("hello");

            System.out.println(Similarity.cosine(first.vector(), second.vector()));
            // 0.938...
        }
    }
}
